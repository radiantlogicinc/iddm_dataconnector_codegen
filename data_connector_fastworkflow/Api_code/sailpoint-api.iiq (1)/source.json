{
  "Accounts": {
    "methods": {
      "/Accounts": {
        "verb": "post",
        "operation": "createAccount",
        "tags": [
          "Accounts"
        ],
        "description": "The endpoint used to create an Account resource. The required payload fields can differ drastically depending on the Application.",
        "parameters": [
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "displayName,active"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "displayName,active"
            },
            "description": "A comma-separated list of attributes to exclude from the response. *Some attributes cannot be excluded.*"
          }
        ]
      },
      "/Accounts/{accountId}": {
        "verb": "delete",
        "operation": "deleteAccount",
        "tags": [
          "Accounts"
        ],
        "description": "The endpoint used to delete an Account resource. **This is not reversible.**",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "c7c7777c7ef77e77777ee77e7a1f0444"
            },
            "description": "The id of the Account.",
            "required": true
          }
        ]
      }
    }
  },
  "Alerts": {
    "methods": {
      "/Alerts": {
        "verb": "post",
        "operation": "createAlert",
        "tags": [
          "Alerts"
        ],
        "description": "The endpoint used to create an Alert resource.",
        "parameters": [
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "name"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "name, application"
            },
            "description": "A comma-separated list of attributes to exclude from the response. **Some attributes cannot be excluded.**"
          }
        ]
      },
      "/Alerts/{alertId}": {
        "verb": "get",
        "operation": "getAlertById",
        "tags": [
          "Alerts"
        ],
        "description": ">The Alert resource with matching id is returned.<br /><br />\n>Attributes to include in the response can be specified with the attributes query parameter. <br /><br /> \n>Attributes to exclude from the response can be specified with the excludedAttributes query parameter. <br /><br />\n",
        "parameters": [
          {
            "name": "alertId",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "c0a8019c802d1e5a81802eb2b57e020f"
            },
            "description": "id of Alert resource.",
            "required": true
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "name"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "name, application"
            },
            "description": "A comma-separated list of attributes to exclude from the response. **Some attributes cannot be excluded.**"
          }
        ]
      }
    }
  },
  "Applications": {
    "methods": {
      "/Applications": {
        "verb": "get",
        "operation": "getApplications",
        "tags": [
          "Applications"
        ],
        "description": "This endpoint returns all Application resources. <br /><br />\nAttributes to include in the response can be specified with the 'attributes' query parameter. <br /><br /> \nAttributes to exclude from the response can be specified with the 'excludedAttributes' query parameter. <br /><br />\nThe schema related to Applications is: \n- **urn:ietf:params:scim:schemas:core:1.0:Application**\n",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string",
              "example": "type eq \"Active Directory - Direct\""
            },
            "description": "Allows for query filters according to RFC-7644, Section 3.4.2.2 - not all operations are supported."
          },
          {
            "in": "query",
            "name": "lookupByName",
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "name"
            },
            "description": "Allows sorting the results by a resource's attributes."
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "default": "ascending",
              "example": "descending"
            },
            "description": "Determines what order to sort results in."
          },
          {
            "in": "query",
            "name": "startIndex",
            "schema": {
              "type": "integer",
              "example": 10,
              "default": 1
            },
            "description": "Determines the starting index of the result set."
          },
          {
            "in": "query",
            "name": "count",
            "schema": {
              "type": "integer",
              "example": 10,
              "default": 1
            },
            "description": "Specifies the number of results per page."
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "name,type,features"
            },
            "description": "The Application attributes to include in the response. The query parameter value is a comma-separated list of fields to be returned in the response for each Application. The attributes listed will be the only ones returned in the response, with the exception of id, schemas, and meta, which are always returned for an Application."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "features"
            },
            "description": "The Application attributes to exclude frome the response. The query parameter value is a comma-separated list of fields to be excluded from the response for each Application. The attributes listed will be the only ones excluded frome the response, with the exception of id, schemas, and meta, which are always returned for an Application."
          }
        ]
      },
      "/Applications/{applicationId}": {
        "verb": "get",
        "operation": "getApplication",
        "tags": [
          "Applications"
        ],
        "description": "The Application resource with matching id or name is returned. Attributes to include in the response can be specified with the 'attributes' query parameter. \nAttributes to exclude from the response can be specified with the 'excludedAttributes' query parameter. \nThe schema related to Application is: \n- **urn:ietf:params:scim:schemas:sailpoint:1.0:Application.**\n",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "7f00000180281df7818028bfaae8035b"
            },
            "description": "id or name of Application resource.",
            "required": true
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "name,type,features"
            },
            "description": "The Application attributes to include in the response. The query parameter value is a comma-separated list of fields to be returned in the response for each Application. The attributes listed will be the only ones returned in the response, with the exception of id, schemas, and meta, which are always returned for an Application."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "features"
            },
            "description": "The Application attributes to exclude frome the response. The query parameter value is a comma-separated list of fields to be excluded from the response for each Application. The attributes listed will be the only ones excluded frome the response, with the exception of id, schemas, and meta, which are always returned for an Application."
          }
        ]
      }
    }
  },
  "CheckedPolicyViolations": {
    "methods": {
      "/CheckedPolicyViolations": {
        "verb": "post",
        "operation": "checkPolicyViolations",
        "tags": [
          "Checked Policy Violations"
        ],
        "description": ">This submits a set of access items to request and a set of policies to check after the access provisioning is simulated in order to determine if policy violations would be created by provisioning the access items. It receives a payload that includes:  \n\n>**An identity:** Used as the recipient for the access items on the simulation. \n\n>**A provisioning plan:** To specify the changes to be simulatedly provisioned in the provided identity  \n\n>**A list of policies:** to check after the simulation of provisioning plan was applied to the identity in order to determine if the access granted in the simulation causes new policy violations. \n\n>Optionally you can pass a list of attributes, as query params, to be included or excluded from the response, this setting is applicable only to top level attributes as defined in the schema ***urn:ietf:params:scim:schemas:sailpoint:1.0:CheckedPolicyViolation.***  \n\n>**Valid values**: \n**- policies**\n **- identity**\n **- plan**\n **- violations**\n **- leftBundles**\n **- rightBundles** \n",
        "parameters": [
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string"
            },
            "description": "A list of attributes to indicate what top level attributes to include in the response"
          },
          {
            "in": "query",
            "name": "authnPassword",
            "schema": {
              "type": "string"
            },
            "description": "Password for authentication"
          },
          {
            "in": "query",
            "name": "authnUsername",
            "schema": {
              "type": "string"
            },
            "description": "Username for authentication"
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string"
            },
            "description": "A list of attributes to indicate what top level attributes to exclude from the response"
          },
          {
            "in": "query",
            "name": "lookupByName",
            "schema": {
              "type": "boolean"
            },
            "description": "This is not required in this endpoint, the returned object is a new PolicyViolation and not one returned from the persistence layer. This is inherited from the BaseSCIMResource and is used to override the default id based lookup, and use a name based lookup instead, if for any reason the artifact id is not present.",
            "example": false
          }
        ]
      }
    }
  },
  "Entitlements": {
    "methods": {
      "/Entitlements": {
        "verb": "get",
        "operation": "getEntitlements",
        "tags": [
          "Entitlements"
        ],
        "description": "This endpoint returns all Entitlement resources. <br /><br />\nAttributes to include in the response can be specified with the 'attributes' query parameter. <br /><br />\nAttributes to exclude from the response can be specified with the 'excludedAttributes' query parameter. <br /><br />\nThe schemas related to Entitlements are:\n- **urn:ietf:params:scim:schemas:sailpoint:1.0:Entitlement**\n",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string",
              "example": "displayableName eq \"accessLog\""
            },
            "description": "Allows for query filters according to RFC-7644, Section 3.4.2.2 - not all operations are supported."
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "application"
            },
            "description": "Allows sorting the results by a resource's attributes."
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "default": "ascending",
              "example": "descending"
            },
            "description": "Determines what order to sort results in."
          },
          {
            "in": "query",
            "name": "startIndex",
            "schema": {
              "type": "integer",
              "example": 10,
              "default": 1
            },
            "description": "Determines the starting index of the result set."
          },
          {
            "in": "query",
            "name": "count",
            "schema": {
              "type": "integer",
              "example": 10,
              "default": 1000
            },
            "description": "Specifies the number of results per page."
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "application"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "application"
            },
            "description": "A comma-separated list of attributes to exclude from the response. **Some attributes cannot be excluded.**"
          }
        ]
      },
      "/Entitlements/{entitlementId}": {
        "verb": "get",
        "operation": "getEntitlementById",
        "tags": [
          "Entitlements"
        ],
        "description": "The Entitlement resource with matching id is returned.<br /><br />\nAttributes to include in the response can be specified with the attributes query parameter. <br /><br />\nAttributes to exclude from the response can be specified with the excludedAttributes query parameter. <br /><br />\n",
        "parameters": [
          {
            "name": "entitlementId",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "c0a8019c802d1e5a81802eb2b57e020f"
            },
            "description": "id of Entitlement resource.",
            "required": true
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "application"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "name, application"
            },
            "description": "A comma-separated list of attributes to exclude from the response. **Some attributes cannot be excluded.**"
          }
        ]
      }
    }
  },
  "LaunchedWorkflows": {
    "methods": {
      "/LaunchedWorkflows": {
        "verb": "post",
        "operation": "launchWorkflow",
        "tags": [
          "LaunchedWorkflows"
        ],
        "description": "Endpoint to launch or execute a Workflow. A payload for the request is required and this can include inputs specific to the Workflow being launched.",
        "parameters": [
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "input"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "workflowName"
            },
            "description": "A comma-separated list of attributes to exclude from the response. *Some attributes cannot be excluded.*"
          }
        ]
      }
    }
  },
  "LaunchedWorkflow": {
    "methods": {
      "/LaunchedWorkflow/{launchedWorkflowId}": {
        "verb": "get",
        "operation": "getLaunchedWorkflowById",
        "tags": [
          "LaunchedWorkflows"
        ],
        "description": "The LaunchedWorkflow resource with matching id is returned.<br /><br />\nAttributes to include in the response can be specified with the attributes query parameter. <br /><br /> \nAttributes to exclude from the response can be specified with the excludedAttributes query parameter. <br /><br />\n\nThe schema related to LaunchedWorkflow is: \n- **urn:ietf:params:scim:schemas:sailpoint:1.0:LaunchedWorkflow**\n",
        "parameters": [
          {
            "name": "launchedWorkflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "c0a8019c802d1e5a81802eb2b57e020f"
            },
            "description": "id of LaunchedWorkflow resource.",
            "required": true
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "expiration"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "names"
            },
            "description": "A comma-separated list of attributes to exclude from the response. **Some attributes cannot be excluded.**"
          }
        ]
      }
    }
  },
  "ObjectConfigs": {
    "methods": {
      "/ObjectConfigs": {
        "verb": "get",
        "operation": "getObjectConfigs",
        "tags": [
          "ObjectConfig"
        ],
        "description": "This endpoint returns all ObjectConfig resources. <br/>\n\nAttributes to include in the response can be specified with the attributes query parameter. <br/> \n\nAttributes to exclude from the response can be specified with the excludedAttributes query parameter. <br/>\n\nThe schema related to ObjectConfig is: \n- **urn:ietf:params:scim:schemas:sailpoint:1.0:ObjectConfig**.\n",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string",
              "example": "name eq \"identity\""
            },
            "description": "Allows for query filters according to RFC-7644, Section 3.4.2.2 - not all operations are supported."
          },
          {
            "in": "query",
            "name": "lookupByName",
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            },
            "description": "(OPTIONAL) Set to true if the ObjectConfig name is passed instead of the ObjectConfig id."
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "name"
            },
            "description": "Allows sorting the results by a resource's attributes."
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "default": "ascending"
            },
            "example": "descending",
            "description": "Determines what order to sort results in."
          },
          {
            "in": "query",
            "name": "startIndex",
            "schema": {
              "type": "integer",
              "example": 10,
              "default": 1
            },
            "description": "Determines the starting index of the result set."
          },
          {
            "in": "query",
            "name": "count",
            "schema": {
              "type": "integer",
              "example": 10,
              "default": 1000
            },
            "description": "Specifies the number of results per page."
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "name"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "name, objectAttributes"
            },
            "description": "A comma-separated list of attributes to exclude from the response. **Some attributes cannot be excluded.**"
          }
        ]
      }
    }
  },
  "ObjectConfig": {
    "methods": {
      "/ObjectConfig/{objectConfigId}": {
        "verb": "get",
        "operation": "getObjectConfigById",
        "tags": [
          "ObjectConfig"
        ],
        "description": "The ObjectConfig resource with matching name or id is returned. <br/>\n\nAttributes to include in the response can be specified with the 'attributes' query parameter. <br/>\n\nAttributes to exclude from the response can be specified with the 'excludedAttributes' query parameter.\n\nThe schema related to ObjectConfig is:\n- **urn:ietf:params:scim:schemas:sailpoint:1.0:ObjectConfig**\n",
        "parameters": [
          {
            "name": "objectConfigId",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "7f00000180281df7818028be62e500e8"
            },
            "description": "id of ObjectConfig resource.",
            "required": true
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "objectAttributes"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "name"
            },
            "description": "A comma-separated list of attributes to exclude from the response. **Some attributes cannot be excluded.**"
          }
        ]
      }
    }
  },
  "PolicyViolations": {
    "methods": {
      "/PolicyViolations": {
        "verb": "get",
        "operation": "getPolicyViolations",
        "tags": [
          "PolicyViolations"
        ],
        "description": "This endpoint returns all PolicyViolation resources.",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string",
              "example": "constraintName eq \"Mock Constraint\""
            },
            "description": "Allows for query filters according to RFC-7644, Section 3.4.2.2 - not all operations are supported."
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "constraintName"
            },
            "description": "Allows sorting the results by a resource's attributes."
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "example": "descending",
              "default": "ascending"
            },
            "description": "Determines what order to sort results in."
          },
          {
            "in": "query",
            "name": "startIndex",
            "schema": {
              "type": "integer",
              "example": 2313,
              "default": 1
            },
            "description": "Determines the starting index of the result set."
          },
          {
            "in": "query",
            "name": "count",
            "schema": {
              "type": "integer",
              "example": 10,
              "default": 1000
            },
            "description": "Specifies the number of results per page."
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "policyName,constraintName"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "policyName,constraintName"
            },
            "description": "A comma-separated list of attributes to exclude from the response. *Some attributes cannot be excluded.*"
          }
        ]
      },
      "/PolicyViolations/{policyViolationId}": {
        "verb": "get",
        "operation": "getPolicyViolationById",
        "tags": [
          "PolicyViolations"
        ],
        "description": "The PolicyViolation resource with matching id is returned.",
        "parameters": [
          {
            "name": "policyViolationId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "The id of the PolicyViolation.",
            "required": true
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "policyName,constraintName"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "policyName,constraintName"
            },
            "description": "A comma-separated list of attributes to exclude from the response. *Some attributes cannot be excluded.*"
          }
        ]
      }
    }
  },
  "ResourceTypes": {
    "methods": {
      "/ResourceTypes": {
        "verb": "get",
        "operation": "getResourceTypes",
        "tags": [
          "ResourceTypes"
        ],
        "description": "All ResourceType resources are listed in the response. The common fields for each ResourceType entry are 'endpoint', 'id', 'name', 'description', 'schema' and 'schemaExtensions'.",
        "parameters": []
      },
      "/ResourceTypes/{resourceTypeId}": {
        "verb": "get",
        "operation": "getResourceTypeById",
        "tags": [
          "ResourceTypes"
        ],
        "description": "The ResourceType with the matching ID is returned. The ID is the URN of the SCIM resource. The common fields for each ResourceType entry are 'endpoint', 'id', 'name', 'description', 'schema' and 'schemaExtensions'.",
        "parameters": [
          {
            "name": "resourceTypeId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "ID of ResourceType resource.",
            "required": true
          }
        ]
      }
    }
  },
  "Roles": {
    "methods": {
      "/Roles": {
        "verb": "get",
        "operation": "getRoles",
        "tags": [
          "Roles"
        ],
        "description": "This endpoint returns all Role resources. Attributes to include in the response can be specified with the 'attributes' query parameter. Attributes to exclude from the response can be specified with the 'excludedAttributes' query parameter. The core schema is urn:ietf:params:scim:schemas:sailpoint:1.0:Role.",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "description": "Allows for query filters according to RFC-7644, Section 3.4.2.2 - not all operations are supported.<br/><br/>**Example**: filter=name eq \"Data Analyst\""
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string"
            },
            "description": "Allows sorting the results by a resource's attributes.<br/><br/>**Example**: sortBy=\"name\""
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string"
            },
            "description": "Determines what order to sort results in.<br/><br/>**Example**: sortOrder=\"descending\""
          },
          {
            "in": "query",
            "name": "startIndex",
            "schema": {
              "type": "integer"
            },
            "description": "Determines the starting index of the result set.<br/><br/>**Example**: startIndex=1100"
          },
          {
            "in": "query",
            "name": "count",
            "schema": {
              "type": "integer"
            },
            "description": "Specifies the number of results per page.<br/><br/>**Example**: count=10"
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string"
            },
            "description": "The Role attributes to include in the response. The query parameter value is a comma-separated list of fields to be returned in the response for each Role.<br/><br/>**Example**: attributes=name,type,classifications<br/><br/> The attributes listed will be the only ones returned in the response, with the exception of id, schemas, and meta, which are always returned for a Role."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string"
            },
            "description": "The Role attributes to exclude frome the response. The query parameter value is a comma-separated list of fields to be excluded from the response for each Role.<br/><br/>**Example**: excludedAttributes=permits,requirements,inheritance<br/><br/> The attributes listed will be the only ones excluded frome the response, with the exception of id, schemas, and meta, which are always returned for a Role."
          }
        ]
      },
      "/Roles/{roleId}": {
        "verb": "get",
        "operation": "getRole",
        "tags": [
          "Roles"
        ],
        "description": "The Role resource with matching ID or name is returned. Attributes to include in the response can be specified with the 'attributes' query parameter. Attributes to exclude from the response can be specified with the 'excludedAttributes' query parameter. The core schema is urn:ietf:params:scim:schemas:sailpoint:1.0:Role.",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "ID or name of Role resource.",
            "required": true
          },
          {
            "in": "query",
            "name": "lookupByName",
            "schema": {
              "type": "boolean"
            },
            "description": "A boolean value that determines if the Role resource will be looked up by name instead of Id (value in path parameter 'roleId'). Setting this query parameter to true will cause the value pulled from the 'roleId' path parameter to be treated as a name when searching for the resource.<br/><br/>**Example**: scim/v2/Roles/**Data Analyst**?**lookupByName=true**"
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string"
            },
            "description": "The Role attributes to include in the response. The query parameter value is a comma-separated list of fields to be returned in the response for each Role.<br/><br/>**Example**: attributes=name,type<br/><br/> The attributes listed will be the only ones returned in the response, with the exception of id, schemas, and meta, which are always returned for a Role."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string"
            },
            "description": "The Role attributes to exclude frome the response. The query parameter value is a comma-separated list of fields to be excluded from the response for each Role.<br/><br/>**Example**: excludedAttributes=permits,requirements<br/><br/> The attributes listed will be the only ones excluded frome the response, with the exception of id, schemas, and meta, which are always returned for a Role."
          }
        ]
      }
    }
  },
  "Schemas": {
    "methods": {
      "/Schemas": {
        "verb": "get",
        "operation": "getSchemas",
        "tags": [
          "Schemas"
        ],
        "description": "All Schema resources are listed in the response. The 'attributes' field holds the schema-specific attributes which differ depending on Schema type.",
        "parameters": []
      },
      "/Schemas/{schemaId}": {
        "verb": "get",
        "operation": "getSchemaById",
        "tags": [
          "Schemas"
        ],
        "description": "The Schema with the matching id is returned. The id is the URN of the SCIM resource. The 'attributes' field holds the schema-specific attributes which differ depending on Schema type.",
        "parameters": [
          {
            "name": "schemaId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "The id of the Schema.",
            "required": true
          }
        ]
      }
    }
  },
  "ServiceProviderConfig": {
    "methods": {
      "/ServiceProviderConfig": {
        "verb": "get",
        "operation": "ServiceProviderConfigGet",
        "tags": [
          "ServiceProviderConfig"
        ],
        "description": "This endpoint returns all ServiceProviderConfig resources. <br /><br />\nAttributes to include in the response can be specified with the 'attributes' query parameter. <br /><br />\nAttributes to exclude from the response can be specified with the 'excludedAttributes' query parameter. <br /><br />\nThe schema related to ServiceProviderConfig is: <br />\n- **urn:ietf:params:scim:schemas:sailpoint:2.0:ServiceProviderConfig**\n",
        "parameters": []
      }
    }
  },
  "TaskResults": {
    "methods": {
      "/TaskResults": {
        "verb": "get",
        "operation": "TaskResultsGet",
        "tags": [
          "TaskResults"
        ],
        "description": "This endpoint returns all TaskResult resources. <br /><br />\nAttributes to include in the response can be specified with the 'attributes' query parameter. <br /><br />\nAttributes to exclude from the response can be specified with the 'excludedAttributes' query parameter. <br /><br />\nThe schema related to TaskResult is:\n- **urn:ietf:params:scim:schemas:sailpoint:1.0:TaskResult**\n",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string",
              "example": "name eq \"AdminsAggTask\""
            },
            "description": "Allows for query filters according to RFC-7644, Section 3.4.2.2 - not all operations are supported."
          },
          {
            "in": "query",
            "name": "lookupByName",
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            },
            "description": "**(OPTIONAL)** Set to true if the TaskResult name is passed instead of the TaskResult id."
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "launched"
            },
            "description": "Allows sorting the results by a resource's attributes."
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "default": "ascending"
            },
            "example": "descending",
            "description": "Determines what order to sort results in."
          },
          {
            "in": "query",
            "name": "startIndex",
            "schema": {
              "type": "integer",
              "example": 10,
              "default": 1
            },
            "description": "Determines the starting index of the result set."
          },
          {
            "in": "query",
            "name": "count",
            "schema": {
              "type": "integer",
              "example": 5,
              "default": 1000
            },
            "description": "Specifies the number of results per page."
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "completionStatus, attributes"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "taskDefinition, host"
            },
            "description": "A comma-separated list of attributes to exclude from the response. **Some attributes cannot be excluded.**"
          }
        ]
      },
      "/TaskResults/{taskResultId}": {
        "verb": "get",
        "operation": "getTaskResultById",
        "tags": [
          "TaskResults"
        ],
        "description": "The TaskResult resource with matching id is returned.<br /><br />\nAttributes to include in the response can be specified with the attributes query parameter. <br /><br />\nAttributes to exclude from the response can be specified with the excludedAttributes query parameter. <br /><br />\nThe schema related to TaskResult is:\n- **urn:ietf:params:scim:schemas:sailpoint:1.0:TaskResult**\n",
        "parameters": [
          {
            "name": "taskResultId",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "c0a8019c802d1e5a81802eb2b57e020f"
            },
            "description": "id of TaskResult resource.",
            "required": true
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "host"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "name, messages"
            },
            "description": "A comma-separated list of attributes to exclude from the response. **Some attributes cannot be excluded.**"
          }
        ]
      }
    }
  },
  "Users": {
    "methods": {
      "/Users": {
        "verb": "post",
        "operation": "createUser",
        "tags": [
          "Users"
        ],
        "description": "The endpoint used to create a User resource. There are attributes marked as 'returned only by request', such as **roles**, which must be provided as part of the **attributes** query parameter in order to be included in the response.",
        "parameters": [
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "userName,nativeIdentity"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "userName,manuallyCorrelated"
            },
            "description": "A comma-separated list of attributes to exclude from the response. *Some attributes cannot be excluded.*"
          }
        ]
      },
      "/Users/{userId}": {
        "verb": "delete",
        "operation": "deleteUser",
        "tags": [
          "Users"
        ],
        "description": "The endpoint used to delete a User resource. **This is not reversible.**",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "c7c7777c7ef77e77777ee77e7a1f0444"
            },
            "description": "The id of User resource. If **lookupByName** is set to **true**, this path parameter should be set to the **userName** of the User.",
            "required": true
          },
          {
            "in": "query",
            "name": "lookupByName",
            "schema": {
              "type": "boolean",
              "example": false,
              "default": false
            },
            "description": "A boolean value that determines if the User resource will be looked up by userName instead of userId (value in path parameter 'userId'). Setting this query parameter to true will cause the value pulled from the 'userId' path parameter to be treated as a userName when searching for the resource.<br/><br/>**Example**: scim/v2/Users/**Mock.User**?**lookupByName=true**"
          }
        ]
      }
    }
  },
  "Workflows": {
    "methods": {
      "/Workflows": {
        "verb": "get",
        "operation": "WorkflowsGet",
        "tags": [
          "Workflows"
        ],
        "description": "This endpoint returns all Workflow resources. <br /><br />\nAttributes to include in the response can be specified with the 'attributes' query parameter. <br /><br /> \nAttributes to exclude from the response can be specified with the 'excludedAttributes' query parameter. <br /><br />\nThe schema related to Workflow is: <br /> \n- **urn:ietf:params:scim:schemas:sailpoint:1.0:Workflow**\n",
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string",
              "example": "name eq \"Do Provisioning Forms\""
            },
            "description": "Allows for query filters according to RFC-7644, Section 3.4.2.2 - not all operations are supported."
          },
          {
            "in": "query",
            "name": "lookupByName",
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            },
            "description": "**(OPTIONAL)** Set to true if the Workflows name is passed instead of the Workflow id."
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "name"
            },
            "description": "Allows sorting the results by a resource's attributes."
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "default": "ascending",
              "example": "descending"
            },
            "description": "Determines what order to sort results in."
          },
          {
            "in": "query",
            "name": "startIndex",
            "schema": {
              "type": "integer",
              "example": 15,
              "default": 1
            },
            "description": "Determines the starting index of the result set."
          },
          {
            "in": "query",
            "name": "count",
            "schema": {
              "type": "integer",
              "example": 15,
              "default": 1000
            },
            "description": "Specifies the number of results per page."
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "name"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "name, type"
            },
            "description": "A comma-separated list of attributes to exclude from the response. **Some attributes cannot be excluded.**"
          }
        ]
      },
      "/Workflows/{workflowId}": {
        "verb": "get",
        "operation": "getWorkflowById",
        "tags": [
          "Workflows"
        ],
        "description": "The Workflow resource with matching id is returned.<br /><br />\nAttributes to include in the response can be specified with the attributes query parameter. <br /><br /> \nAttributes to exclude from the response can be specified with the excludedAttributes query parameter. <br /><br />\n\nThe schema related to Workflow is: <br /> \n- **urn:ietf:params:scim:schemas:sailpoint:1.0:Workflow**\n",
        "parameters": [
          {
            "name": "workflowId",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "c0a8019c802d1e5a81802eb2b57e020f"
            },
            "description": "id of Workflow resource.",
            "required": true
          },
          {
            "in": "query",
            "name": "attributes",
            "schema": {
              "type": "string",
              "example": "name, type"
            },
            "description": "A comma-separated list of attributes to return in the response. This query parameter supersedes excludedAttributes, so providing the same attribute(s) to both will result in the attribute(s) being returned."
          },
          {
            "in": "query",
            "name": "excludedAttributes",
            "schema": {
              "type": "string",
              "example": "name, handler"
            },
            "description": "A comma-separated list of attributes to exclude from the response. **Some attributes cannot be excluded.**"
          }
        ]
      }
    }
  }
}