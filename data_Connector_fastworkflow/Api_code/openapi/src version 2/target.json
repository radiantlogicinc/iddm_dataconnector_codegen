{
  "objects": {
    "login": {
      "methods": {
        "/authn/{account}/login": {
          "verb": "get",
          "operation": "getAPIKey",
          "tags": [
            "authentication"
          ],
          "description": "Passwords are stored in the Conjur database using `bcrypt`\nwith a work factor of 12. Therefore, login is a fairly expensive operation.\nHowever, once the API key is obtained, it may be used to inexpensively\nobtain access tokens by calling the Authenticate method. An access token\nis required to use most other parts of the Conjur API.\n\nThe Basic authentication-compliant header is formed by:\n1. Concatenating the role's name, a literal colon character ':',\n   and the password or API key to create the authentication string.\n2. Base64-encoding the authentication string.\n3. Prefixing the authentication string with the scheme: `Basic `\n   (note the required space).\n4. Providing the result as the value of the `Authorization` HTTP header:\n   `Authorization: Basic <authentication string>`.\n\nYour HTTP/REST client probably provides HTTP basic authentication support.\nFor example, `curl` and all of the Conjur client libraries provide this.\n\nNote that machine roles (Hosts) do not have passwords and do not need to\nuse this endpoint.\n",
          "parameters": [
            {
              "name": "account",
              "in": "path",
              "required": true,
              "description": "Organization account name",
              "schema": {
                "$ref": "openapi.yml#/components/schemas/AccountName"
              }
            }
          ]
        },
        "/authn-ldap/{service_id}/{account}/login": {
          "verb": "get",
          "operation": "getAPIKeyViaLDAP",
          "tags": [
            "authentication"
          ],
          "description": "Exchange your LDAP credentials for a Conjur API key. Once the\nAPI key is obtained, it may be used to inexpensively obtain access\ntokens by calling the Authenticate method. An access token\nis required to use most other parts of the Conjur API.\n\nThe Basic authentication-compliant header is formed by:\n1. Concatenating the LDAP username, a literal colon character ':',\n   and the password to create the authentication string.\n2. Base64-encoding the authentication string.\n3. Prefixing the authentication string with the scheme: `Basic `\n   (note the required space).\n4. Providing the result as the value of the `Authorization` HTTP header:\n   `Authorization: Basic <authentication string>`.\n\nYour HTTP/REST client probably provides HTTP basic authentication support.\n",
          "parameters": [
            {
              "$ref": "openapi.yml#/components/parameters/ServiceID"
            },
            {
              "name": "account",
              "in": "path",
              "required": true,
              "description": "Organization account name",
              "schema": {
                "$ref": "openapi.yml#/components/schemas/AccountName"
              }
            }
          ]
        }
      }
    },
    "inject_client_cert": {
      "methods": {
        "/authn-k8s/{service_id}/inject_client_cert": {
          "verb": "post",
          "operation": "k8sInjectClientCert",
          "tags": [
            "authentication"
          ],
          "description": "This request sends a Certificate Signing Request to Conjur,\nwhich uses the Kubernetes API to inject a client certificate into the\napplication pod.\n\nThis endpoint requires a properly configured Conjur Certificate Authority\nservice alongside a properly configured and enabled Kubernetes authenticator.\nFor detailed instructions,\nsee [the documentation](https://docs.conjur.org/Latest/en/Content/Integrations/kubernetes.htm).\n",
          "parameters": [
            {
              "$ref": "openapi.yml#/components/parameters/ServiceID"
            },
            {
              "name": "Host-Id-Prefix",
              "in": "header",
              "description": "Dot-separated policy tree, prefixed by `host.`, where the application identity is defined",
              "schema": {
                "type": "string",
                "example": "host/conjur/authn-k8s/my-authenticator-id/apps"
              }
            }
          ]
        }
      }
    },
    "authenticate": {
      "methods": {
        "/authn/{account}/{login}/authenticate": {
          "verb": "post",
          "operation": "getAccessToken",
          "tags": [
            "authentication"
          ],
          "description": "A client can obtain an access token by presenting a valid\nlogin name and API key.\n\nThe access token is used to communicate to the REST API that the bearer\nof the token has been authorized to access the API and perform specific\nactions specified by the scope that was granted during authorization.\n\nThe `login` must be URL encoded. For example, `alice@devops` must be\nencoded as `alice%40devops`.\n\nThe `service_id`, if given, must be URL encoded. For example,\n`prod/gke` must be encoded as `prod%2Fgke`.\n\nFor host authentication, the `login` is the host ID with the prefix\n`host/`. For example, the host webserver would login as `host/webserver`,\nand would be encoded as `host%2Fwebserver`.\n\nFor API usage, the base64-encoded access token is ordinarily passed as an HTTP\nAuthorization header as `Authorization: Token token=<base64-encoded token>`.\n\nThis is the default authentication endpoint only. See other endpoints for\ndetails on authenticating to Conjur using another method, e.g. for\napplications running in Azure or Kubernetes.\n",
          "parameters": [
            {
              "name": "account",
              "in": "path",
              "required": true,
              "description": "Organization account name",
              "schema": {
                "$ref": "openapi.yml#/components/schemas/AccountName"
              }
            },
            {
              "name": "login",
              "in": "path",
              "required": true,
              "description": "URL-encoded login name. For users, itâ€™s the user ID. For hosts, the login name is `host/<host-id>`",
              "schema": {
                "$ref": "#/components/schemas/LoginName"
              }
            },
            {
              "name": "Accept-Encoding",
              "in": "header",
              "description": "Setting the Accept-Encoding header to base64 will return a pre-encoded access token",
              "schema": {
                "type": "string",
                "enum": [
                  "application/json",
                  "base64"
                ],
                "default": "application/json"
              }
            }
          ]
        },
        "/authn-gcp/{account}/authenticate": {
          "verb": "post",
          "operation": "getAccessTokenViaGCP",
          "tags": [
            "authentication"
          ],
          "description": "Use the GCP Authenticator API to send an authentication\nrequest from a Google Cloud service to Conjur.\n\nFor more information, see [the documentation](https://docs.conjur.org/Latest/en/Content/Operations/Services/cjr-gcp-authn.htm).\n",
          "parameters": [
            {
              "name": "account",
              "in": "path",
              "required": true,
              "description": "Organization account name",
              "schema": {
                "type": "string"
              },
              "example": "dev"
            },
            {
              "name": "Accept-Encoding",
              "in": "header",
              "description": "Setting the Accept-Encoding header to base64 will return a pre-encoded access token",
              "schema": {
                "type": "string",
                "enum": [
                  "base64"
                ]
              }
            }
          ]
        },
        "/authn-oidc/{service_id}/{account}/authenticate": {
          "verb": "post",
          "operation": "getAccessTokenViaOIDC",
          "tags": [
            "authentication"
          ],
          "description": "Use the OIDC Authenticator to leverage the identity layer\nprovided by OIDC to authenticate with Conjur.\n\nFor more information see [the documentation](https://docs.conjur.org/Latest/en/Content/OIDC/OIDC.htm).\n",
          "parameters": [
            {
              "$ref": "openapi.yml#/components/parameters/ServiceID"
            },
            {
              "name": "account",
              "in": "path",
              "required": true,
              "description": "Organization account name",
              "schema": {
                "$ref": "openapi.yml#/components/schemas/AccountName"
              }
            }
          ]
        },
        "/authn-jwt/{service_id}/{account}/authenticate": {
          "verb": "post",
          "operation": "getAccessTokenViaJWT",
          "tags": [
            "authentication"
          ],
          "description": "Use the JWT Authenticator to leverage the identity layer\nprovided by JWT to authenticate with Conjur.\n",
          "parameters": [
            {
              "name": "account",
              "in": "path",
              "required": true,
              "description": "Organization account name",
              "schema": {
                "$ref": "openapi.yml#/components/schemas/AccountName"
              }
            },
            {
              "$ref": "openapi.yml#/components/parameters/ServiceID"
            }
          ]
        }
      }
    },
    "authn-iam": {
      "methods": {
        "/authn-iam/{service_id}/{account}/{login}/authenticate": {
          "verb": "post",
          "operation": "getAccessTokenViaAWS",
          "tags": [
            "authentication"
          ],
          "description": "The access token is used to communicate to the REST API that\nthe bearer of the token has been authorized to access the API and perform\nspecific actions specified by the scope that was granted during authorization.\n\nFor API usage, the base64-encoded access token is ordinarily passed as an HTTP\nAuthorization header as `Authorization: Token token=<base64-encoded token>`.\n\nThe `login` must be URL encoded and the host ID must have the prefix\n`host/`. For example, the host webserver would login as `host/webserver`,\nand would be encoded as `host%2Fwebserver`.\n\nThe `service_id`, if given, must be URL encoded. For example,\n`prod/gke` must be encoded as `prod%2Fgke`.\n\nFor detailed instructions on authenticating to Conjur using this endpoint,\nreference the documentation:\n[AWS IAM Authenticator](https://docs.conjur.org/Latest/en/Content/Operations/Services/AWS_IAM_Authenticator.htm) (`authn-iam`).\n",
          "parameters": [
            {
              "$ref": "openapi.yml#/components/parameters/ServiceID"
            },
            {
              "name": "account",
              "in": "path",
              "required": true,
              "description": "Organization account name",
              "schema": {
                "$ref": "openapi.yml#/components/schemas/AccountName"
              }
            },
            {
              "name": "login",
              "in": "path",
              "required": true,
              "description": "URL-encoded login name. For hosts, the login name is `host/<host-id>`",
              "schema": {
                "$ref": "#/components/schemas/LoginName"
              }
            },
            {
              "name": "Accept-Encoding",
              "in": "header",
              "description": "Setting the Accept-Encoding header to base64 will return a pre-encoded access token",
              "schema": {
                "type": "string",
                "enum": [
                  "application/json",
                  "base64"
                ],
                "default": "application/json"
              }
            }
          ]
        }
      }
    },
    "authn-azure": {
      "methods": {
        "/authn-azure/{service_id}/{account}/{login}/authenticate": {
          "verb": "post",
          "operation": "getAccessTokenViaAzure",
          "tags": [
            "authentication"
          ],
          "description": "The access token is used to communicate to the REST API that\nthe bearer of the token has been authorized to access the API and perform\nspecific actions specified by the scope that was granted during authorization.\n\nFor API usage, the base64-encoded access token is ordinarily passed as an HTTP\nAuthorization header as `Authorization: Token token=<base64-encoded token>`.\n\nThe `login` must be URL encoded and the host ID must have the prefix\n`host/`. For example, the host webserver would login as `host/webserver`,\nand would be encoded as `host%2Fwebserver`.\n\nThe `service_id`, if given, must be URL encoded. For example,\n`prod/gke` must be encoded as `prod%2Fgke`.\n\nTo authenticate to Conjur using this endpoint, reference the detailed\ndocumentation: [Azure Authenticator](https://docs.conjur.org/Latest/en/Content/Operations/Services/azure_authn.htm) (`authn-azure`).\n",
          "parameters": [
            {
              "$ref": "openapi.yml#/components/parameters/ServiceID"
            },
            {
              "name": "account",
              "in": "path",
              "required": true,
              "description": "Organization account name",
              "schema": {
                "$ref": "openapi.yml#/components/schemas/AccountName"
              }
            },
            {
              "name": "login",
              "in": "path",
              "required": true,
              "description": "URL-encoded login name. For users, itâ€™s the user ID. For hosts, the login name is `host/<host-id>`",
              "schema": {
                "$ref": "#/components/schemas/LoginName"
              }
            },
            {
              "name": "Accept-Encoding",
              "in": "header",
              "description": "Setting the Accept-Encoding header to base64 will return a pre-encoded access token",
              "schema": {
                "type": "string",
                "enum": [
                  "application/json",
                  "base64"
                ],
                "default": "application/json"
              }
            }
          ]
        }
      }
    },
    "authn-k8s": {
      "methods": {
        "/authn-k8s/{service_id}/{account}/{login}/authenticate": {
          "verb": "post",
          "operation": "getAccessTokenViaKubernetes",
          "tags": [
            "authentication"
          ],
          "description": "The access token is used to communicate to the REST API that\nthe bearer of the token has been authorized to access the API and perform\nspecific actions specified by the scope that was granted during authorization.\n\nFor API usage, the base64-encoded access token is ordinarily passed as an HTTP\nAuthorization header as `Authorization: Token token=<base64-encoded token>`.\n\nThe `login` must be URL encoded and the host ID must have the prefix\n`host/`. For example, the host webserver would login as `host/webserver`,\nand would be encoded as `host%2Fwebserver`.\n\nThe `service_id`, if given, must be URL encoded. For example,\n`prod/gke` must be encoded as `prod%2Fgke`.\n\nTo authenticate to Conjur using this endpoint, reference the detailed\ndocumentation: [Kubernetes Authenticator](https://docs.conjur.org/Latest/en/Content/Operations/Services/k8s_auth.htm) (`authn-k8s`).\n",
          "parameters": [
            {
              "$ref": "openapi.yml#/components/parameters/ServiceID"
            },
            {
              "name": "account",
              "in": "path",
              "required": true,
              "description": "Organization account name",
              "schema": {
                "$ref": "openapi.yml#/components/schemas/AccountName"
              }
            },
            {
              "name": "login",
              "in": "path",
              "required": true,
              "description": "URL-encoded login name. For users, itâ€™s the user ID. For hosts, the login name is `host/<host-id>`",
              "schema": {
                "$ref": "#/components/schemas/LoginName"
              }
            },
            {
              "name": "Accept-Encoding",
              "in": "header",
              "description": "Setting the Accept-Encoding header to base64 will return a pre-encoded access token",
              "schema": {
                "type": "string",
                "enum": [
                  "application/json",
                  "base64"
                ],
                "default": "application/json"
              }
            }
          ]
        }
      }
    },
    "authn-ldap": {
      "methods": {
        "/authn-ldap/{service_id}/{account}/{login}/authenticate": {
          "verb": "post",
          "operation": "getAccessTokenViaLDAP",
          "tags": [
            "authentication"
          ],
          "description": "The access token is used to communicate to the REST API that\nthe bearer of the token has been authorized to access the API and perform\nspecific actions specified by the scope that was granted during authorization.\n\nFor API usage, the base64-encoded access token is ordinarily passed as an HTTP\nAuthorization header as `Authorization: Token token=<base64-encoded token>`.\n\nThe `login` must be URL encoded. For example, `alice@devops` must be\nencoded as `alice%40devops`.\n\nThe `service_id`, if given, must be URL encoded. For example,\n`prod/gke` must be encoded as `prod%2Fgke`.\n\nFor host authentication, the `login` is the host ID with the prefix\n`host/`. For example, the host webserver would login as `host/webserver`,\nand would be encoded as `host%2Fwebserver`.\n\nTo authenticate to Conjur using a LDAP, reference the detailed documentation:\n[LDAP Authenticator](https://docs.conjur.org/Latest/en/Content/Integrations/ldap/ldap_authenticator.html) (`authn-ldap`).\n",
          "parameters": [
            {
              "$ref": "openapi.yml#/components/parameters/ServiceID"
            },
            {
              "name": "account",
              "in": "path",
              "required": true,
              "description": "Organization account name",
              "schema": {
                "$ref": "openapi.yml#/components/schemas/AccountName"
              }
            },
            {
              "name": "login",
              "in": "path",
              "required": true,
              "description": "URL-encoded login name. For users, itâ€™s the user ID. For hosts, the login name is `host/<host-id>`",
              "schema": {
                "$ref": "#/components/schemas/LoginName"
              }
            },
            {
              "name": "Accept-Encoding",
              "in": "header",
              "description": "Setting the Accept-Encoding header to base64 will return a pre-encoded access token",
              "schema": {
                "type": "string",
                "enum": [
                  "application/json",
                  "base64"
                ],
                "default": "application/json"
              }
            }
          ]
        }
      }
    },
    "authn-jwt": {
      "methods": {
        "/authn-jwt/{service_id}/{account}/{id}/authenticate": {
          "verb": "post",
          "operation": "getAccessTokenViaJWTWithId",
          "tags": [
            "authentication"
          ],
          "description": "Use the JWT Authenticator to leverage the identity layer\nprovided by JWT to authenticate with Conjur.\n",
          "parameters": [
            {
              "name": "account",
              "in": "path",
              "required": true,
              "description": "Organization account name",
              "schema": {
                "$ref": "openapi.yml#/components/schemas/AccountName"
              }
            },
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Organization user id",
              "schema": {
                "$ref": "#/components/schemas/UserId"
              }
            },
            {
              "$ref": "openapi.yml#/components/parameters/ServiceID"
            }
          ]
        }
      }
    },
    "password": {
      "methods": {
        "/authn/{account}/password": {
          "verb": "put",
          "operation": "changePassword",
          "tags": [
            "authentication"
          ],
          "description": "You must provide the login name and current password or\nAPI key of the user whose password is to be updated in an HTTP Basic\nAuthentication header. Also replaces the userâ€™s API key with a new\nsecurely generated random value. You can fetch the new API key using\nthe Login method.\n\nThe Basic authentication-compliant header is formed by:\n1. Concatenating the role's name, a literal colon character ':',\n   and the password or API key to create the authentication string.\n2. Base64-encoding the authentication string.\n3. Prefixing the authentication string with the scheme: `Basic `\n   (note the required space).\n4. Providing the result as the value of the `Authorization` HTTP header:\n   `Authorization: Basic <authentication string>`.\n\nYour HTTP/REST client probably provides HTTP basic authentication\nsupport. For example, `curl` and all of the Conjur client libraries\nprovide this.\n\nNote that machine roles (Hosts) do not have passwords. They authenticate\nusing their API keys, while passwords are only used by human users.\n",
          "parameters": [
            {
              "name": "account",
              "in": "path",
              "description": "Organization account name",
              "required": true,
              "schema": {
                "$ref": "openapi.yml#/components/schemas/AccountName"
              }
            }
          ]
        }
      }
    },
    "api_key": {
      "methods": {
        "/authn/{account}/api_key": {
          "verb": "put",
          "operation": "rotateApiKey",
          "tags": [
            "authentication"
          ],
          "description": "Any role can rotate its own API key. The name and password\n(for users) or current API key (for hosts and users) of the role must\nbe provided via HTTP Basic Authorization.\n\nTo rotate another role's API key, you may provide your name and password\n(for users) or current API key (for hosts and users) via HTTP Basic\nAuthorization with the request. Alternatively, you may provide your\nConjur access token via the standard Conjur `Authorization` header.\n\nThe Basic authentication-compliant header is formed by:\n1. Concatenating the role's name, a literal colon character ':',\n   and the password or API key to create the authentication string.\n2. Base64-encoding the authentication string.\n3. Prefixing the authentication string with the scheme: `Basic `\n   (note the required space).\n4. Providing the result as the value of the `Authorization` HTTP header:\n   `Authorization: Basic <authentication string>`.\n\nYour HTTP/REST client probably provides HTTP basic authentication support.\nFor example, `curl` and all of the Conjur client libraries provide this.\n\nIf using the Conjur `Authorization` header, its value should be set to\n`Token token=<base64-encoded access token>`.\n\nNote that the body of the request must be the empty string.\n",
          "parameters": [
            {
              "name": "account",
              "in": "path",
              "description": "Organization account name",
              "required": true,
              "schema": {
                "$ref": "openapi.yml#/components/schemas/AccountName"
              }
            },
            {
              "name": "role",
              "in": "query",
              "description": "(**Optional**) role specifier in `{kind}:{identifier}` format\n\n##### Permissions required\n\n`update` privilege on the role whose API key is being rotated.\n",
              "schema": {
                "$ref": "openapi.yml#/components/schemas/RoleType"
              }
            }
          ]
        }
      }
    }
  }
}