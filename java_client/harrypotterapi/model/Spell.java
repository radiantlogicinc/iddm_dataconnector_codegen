/*
 * Harry Potter API
 * A REST Harry Potter API with images and information about books, characters and spells. Translated to many languages.  This documentation was built by VÃ­ctor Laurencena and it's available on [GitHub](https://github.com/vlaurencena/harry-potter-openapi-swagger-ui). 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.radiantlogic.openapi.generated.harrypotterapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.radiantlogic.openapi.generated.harrypotterapi.invoker.JacksonConfig;

/**
 * Spell
 */
@JsonPropertyOrder({
  Spell.JSON_PROPERTY_SPELL,
  Spell.JSON_PROPERTY_USE,
  Spell.JSON_PROPERTY_INDEX
})
@javax.annotation.Generated(value = "com.radiantlogic.openapi.codegen.javaclient.generate.codegen.RadiantJavaClientCodegen", date = "2025-07-20T12:50:53.280565630Z[GMT]", comments = "Generator version: unset")
public class Spell {
  public static final String JSON_PROPERTY_SPELL = "spell";
  @javax.annotation.Nullable
  private String spell;

  public static final String JSON_PROPERTY_USE = "use";
  @javax.annotation.Nullable
  private String use;

  public static final String JSON_PROPERTY_INDEX = "index";
  @javax.annotation.Nullable
  private BigDecimal index;

  public Spell() {
  }

  public Spell spell(@javax.annotation.Nullable String spell) {
    
    this.spell = spell;
    return this;
  }

  /**
   * Get spell
   * @return spell
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPELL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSpell() {
    return spell;
  }


  @JsonProperty(JSON_PROPERTY_SPELL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpell(@javax.annotation.Nullable String spell) {
    this.spell = spell;
  }

  public Spell use(@javax.annotation.Nullable String use) {
    
    this.use = use;
    return this;
  }

  /**
   * Get use
   * @return use
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUse() {
    return use;
  }


  @JsonProperty(JSON_PROPERTY_USE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUse(@javax.annotation.Nullable String use) {
    this.use = use;
  }

  public Spell index(@javax.annotation.Nullable BigDecimal index) {
    
    this.index = index;
    return this;
  }

  /**
   * Get index
   * @return index
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getIndex() {
    return index;
  }


  @JsonProperty(JSON_PROPERTY_INDEX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndex(@javax.annotation.Nullable BigDecimal index) {
    this.index = index;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Spell spell = (Spell) o;
    return Objects.equals(this.spell, spell.spell) &&
        Objects.equals(this.use, spell.use) &&
        Objects.equals(this.index, spell.index);
  }

  @Override
  public int hashCode() {
    return Objects.hash(spell, use, index);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Spell {\n");
    sb.append("    spell: ").append(toIndentedString(spell)).append("\n");
    sb.append("    use: ").append(toIndentedString(use)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

