/*
 * MyAccount Management
 * APIs for managing a user's own emails, phones, profile, and app authenticators. > **Note:** The MyAccount API doesn't support [delegated authentication](https://help.okta.com/okta_help.htm?id=ext_Security_Authentication).
 *
 * The version of the OpenAPI document: 2025.01.1
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.okta.myaccount.myaccountmanagement.model;

import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.okta.myaccount.myaccountmanagement.model.KeyEC;
import com.okta.myaccount.myaccountmanagement.model.KeyRSA;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.okta.myaccount.myaccountmanagement.invoker.JacksonConfig;

/**
 * This interface represents a broken union type. A union type is a type definition that can be one of
 * multiple types. Proper code generation from an OpenAPI schema requires the type to have a oneOf mapping,
 * a discriminator, and a discriminator mapping. Lacking all of that combined, a proper discriminated union
 * interface cannot be constructed.
 *
 * As a solution, this interface is designed to present a workaround to the limitations of the incomplete
 * OpenAPI schema it is based on. While on its own it cannot be correctly serialized or de-serialized, it
 * provides a special "Raw" inner type that serves as a workaround to those limitations. It is an
 * extension to a HashMap with some utility code to handle manually converting to and from implementations.
 *
 * While this is hardly the perfect solution, and it does put an extra burden on developers working with this
 * generated code, it is the best option for handling otherwise un-generate-able code.
 *
 * HOW TO USE THE RAW TYPES
 *
 * FOR SERIALIZATION = First call toKeyObjectRaw() on the instance you are trying to serialize. Then
 *                     serialize what is returned from that method.
 *
 * FOR DESERIALIZATION = Use the type KeyObject.Raw rather than this type directly when de-serializing.
 *                       That will at least give you a custom Map of all properties. If you know the specific
 *                       implementation type, you can also call toImplementation(ClassName.class) on the Raw
 *                       type to convert it.
 *
 * A NOTE ON DISCRIMINATORS
 *
 * If the original OpenAPI schema contains a discriminator, the Raw type will have some extra logic to help
 * work with it. If the schema did not contain a discriminator, then that will be absent from the Raw type.
 */
public interface KeyObject  {

    /**
     * Convert the instance of this interface into the Raw type. The Raw type will be modified during the conversion
     * so that issues due to the missing discriminator mapping are resolved. When attempting to serialize implementations
     * of this interface
     *
     * This method contains the classname in it because multiple interfaces like this may be implemented by a single class
     * thus the need to avoid naming collisions. The Raw type produced by any toClassnameRaw() method on an implementation of
     * this interface will always be serializable to the same output.
     */
    default Raw toKeyObjectRaw() {
        final Raw raw = JacksonConfig.OBJECT_MAPPER.convertValue(this, Raw.class);
        return raw;
    }

    /**
     * This represents the raw JSON data associated with this type. It allows for safely de-serializing JSON
     * despite not having proper openapi discriminator mapping information.
     */
    class Raw extends HashMap<String, Object> {

        public <T extends KeyObject> T toImplementation(final Class<T> type) {
            return JacksonConfig.OBJECT_MAPPER.convertValue(this, type);
        }
    }

}

