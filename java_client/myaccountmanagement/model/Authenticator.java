/*
 * MyAccount Management
 * APIs for managing a user's own emails, phones, profile, and app authenticators. > **Note:** The MyAccount API doesn't support [delegated authentication](https://help.okta.com/okta_help.htm?id=ext_Security_Authentication).
 *
 * The version of the OpenAPI document: 2025.01.1
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.okta.myaccount.myaccountmanagement.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.okta.myaccount.myaccountmanagement.model.AuthenticatorEmbedded;
import com.okta.myaccount.myaccountmanagement.model.AuthenticatorKey;
import com.okta.myaccount.myaccountmanagement.model.AuthenticatorLinks;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.okta.myaccount.myaccountmanagement.invoker.JacksonConfig;

/**
 * A specific authenticator of the current user
 */
@JsonPropertyOrder({
  Authenticator.JSON_PROPERTY_ENROLLABLE,
  Authenticator.JSON_PROPERTY_ID,
  Authenticator.JSON_PROPERTY_KEY,
  Authenticator.JSON_PROPERTY_NAME,
  Authenticator.JSON_PROPERTY_EMBEDDED,
  Authenticator.JSON_PROPERTY_LINKS
})
@javax.annotation.Generated(value = "com.radiantlogic.openapi.codegen.javaclient.generate.codegen.RadiantJavaClientCodegen", date = "2025-08-13T20:31:08.570419254Z[GMT]", comments = "Generator version: unset")
public class Authenticator {
  public static final String JSON_PROPERTY_ENROLLABLE = "enrollable";
  @javax.annotation.Nullable
  private Boolean enrollable;

  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nullable
  private String id;

  public static final String JSON_PROPERTY_KEY = "key";
  @javax.annotation.Nullable
  private AuthenticatorKey key;

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nullable
  private String name;

  public static final String JSON_PROPERTY_EMBEDDED = "_embedded";
  @javax.annotation.Nullable
  private AuthenticatorEmbedded embedded;

  public static final String JSON_PROPERTY_LINKS = "_links";
  @javax.annotation.Nullable
  private AuthenticatorLinks links;

  public Authenticator() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public Authenticator(
    @JsonProperty(JSON_PROPERTY_ENROLLABLE) Boolean enrollable, 
    @JsonProperty(JSON_PROPERTY_ID) String id, 
    @JsonProperty(JSON_PROPERTY_NAME) String name
  ) {
    this();
    this.enrollable = enrollable;
    this.id = id;
    this.name = name;
  }

  /**
   * Get enrollable
   * @return enrollable
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENROLLABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnrollable() {
    return enrollable;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }



  public Authenticator key(@javax.annotation.Nullable AuthenticatorKey key) {
    
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AuthenticatorKey getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(@javax.annotation.Nullable AuthenticatorKey key) {
    this.key = key;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }



  public Authenticator embedded(@javax.annotation.Nullable AuthenticatorEmbedded embedded) {
    
    this.embedded = embedded;
    return this;
  }

  /**
   * Get embedded
   * @return embedded
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMBEDDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AuthenticatorEmbedded getEmbedded() {
    return embedded;
  }


  @JsonProperty(JSON_PROPERTY_EMBEDDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmbedded(@javax.annotation.Nullable AuthenticatorEmbedded embedded) {
    this.embedded = embedded;
  }

  public Authenticator links(@javax.annotation.Nullable AuthenticatorLinks links) {
    
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AuthenticatorLinks getLinks() {
    return links;
  }


  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinks(@javax.annotation.Nullable AuthenticatorLinks links) {
    this.links = links;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Authenticator authenticator = (Authenticator) o;
    return Objects.equals(this.enrollable, authenticator.enrollable) &&
        Objects.equals(this.id, authenticator.id) &&
        Objects.equals(this.key, authenticator.key) &&
        Objects.equals(this.name, authenticator.name) &&
        Objects.equals(this.embedded, authenticator.embedded) &&
        Objects.equals(this.links, authenticator.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enrollable, id, key, name, embedded, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Authenticator {\n");
    sb.append("    enrollable: ").append(toIndentedString(enrollable)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    embedded: ").append(toIndentedString(embedded)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

