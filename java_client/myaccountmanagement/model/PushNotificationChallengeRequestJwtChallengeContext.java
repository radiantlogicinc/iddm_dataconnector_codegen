/*
 * MyAccount Management
 * APIs for managing a user's own emails, phones, profile, and app authenticators. > **Note:** The MyAccount API doesn't support [delegated authentication](https://help.okta.com/okta_help.htm?id=ext_Security_Authentication).
 *
 * The version of the OpenAPI document: 2025.01.1
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.okta.myaccount.myaccountmanagement.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.okta.myaccount.myaccountmanagement.invoker.JacksonConfig;

/**
 * PushNotificationChallengeRequestJwtChallengeContext
 */
@JsonPropertyOrder({
  PushNotificationChallengeRequestJwtChallengeContext.JSON_PROPERTY_CLIENT_O_S,
  PushNotificationChallengeRequestJwtChallengeContext.JSON_PROPERTY_CLIENT_LOCATION,
  PushNotificationChallengeRequestJwtChallengeContext.JSON_PROPERTY_TRANSACTION_TIME,
  PushNotificationChallengeRequestJwtChallengeContext.JSON_PROPERTY_TRANSACTION_TYPE,
  PushNotificationChallengeRequestJwtChallengeContext.JSON_PROPERTY_BINDING_MESSAGE
})
@JsonTypeName("PushNotificationChallengeRequestJwt_challengeContext")
@javax.annotation.Generated(value = "com.radiantlogic.openapi.codegen.javaclient.generate.codegen.RadiantJavaClientCodegen", date = "2025-08-13T20:31:08.570419254Z[GMT]", comments = "Generator version: unset")
public class PushNotificationChallengeRequestJwtChallengeContext {
  public static final String JSON_PROPERTY_CLIENT_O_S = "clientOS";
  @javax.annotation.Nullable
  private String clientOS;

  public static final String JSON_PROPERTY_CLIENT_LOCATION = "clientLocation";
  @javax.annotation.Nullable
  private String clientLocation;

  public static final String JSON_PROPERTY_TRANSACTION_TIME = "transactionTime";
  @javax.annotation.Nullable
  private String transactionTime;

  /**
   * Indicates if the request is CIBA or LOGIN
   */
  public enum TransactionTypeEnum {
    CIBA(String.valueOf("CIBA")),
    
    LOGIN(String.valueOf("LOGIN"));

    private String value;

    TransactionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TransactionTypeEnum fromValue(String value) {
      for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TRANSACTION_TYPE = "transactionType";
  @javax.annotation.Nullable
  private TransactionTypeEnum transactionType;

  public static final String JSON_PROPERTY_BINDING_MESSAGE = "bindingMessage";
  @javax.annotation.Nullable
  private String bindingMessage;

  public PushNotificationChallengeRequestJwtChallengeContext() {
  }

  public PushNotificationChallengeRequestJwtChallengeContext clientOS(@javax.annotation.Nullable String clientOS) {
    
    this.clientOS = clientOS;
    return this;
  }

  /**
   * OS of the client making the request
   * @return clientOS
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLIENT_O_S)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClientOS() {
    return clientOS;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_O_S)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientOS(@javax.annotation.Nullable String clientOS) {
    this.clientOS = clientOS;
  }

  public PushNotificationChallengeRequestJwtChallengeContext clientLocation(@javax.annotation.Nullable String clientLocation) {
    
    this.clientLocation = clientLocation;
    return this;
  }

  /**
   * Location of the request
   * @return clientLocation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLIENT_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClientLocation() {
    return clientLocation;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientLocation(@javax.annotation.Nullable String clientLocation) {
    this.clientLocation = clientLocation;
  }

  public PushNotificationChallengeRequestJwtChallengeContext transactionTime(@javax.annotation.Nullable String transactionTime) {
    
    this.transactionTime = transactionTime;
    return this;
  }

  /**
   * Time the challenge request was created
   * @return transactionTime
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTransactionTime() {
    return transactionTime;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionTime(@javax.annotation.Nullable String transactionTime) {
    this.transactionTime = transactionTime;
  }

  public PushNotificationChallengeRequestJwtChallengeContext transactionType(@javax.annotation.Nullable TransactionTypeEnum transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

  /**
   * Indicates if the request is CIBA or LOGIN
   * @return transactionType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TransactionTypeEnum getTransactionType() {
    return transactionType;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionType(@javax.annotation.Nullable TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
  }

  public PushNotificationChallengeRequestJwtChallengeContext bindingMessage(@javax.annotation.Nullable String bindingMessage) {
    
    this.bindingMessage = bindingMessage;
    return this;
  }

  /**
   * If &#x60;transactionType&#x60; is CIBA, this message must be shown to the user
   * @return bindingMessage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BINDING_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBindingMessage() {
    return bindingMessage;
  }


  @JsonProperty(JSON_PROPERTY_BINDING_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBindingMessage(@javax.annotation.Nullable String bindingMessage) {
    this.bindingMessage = bindingMessage;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PushNotificationChallengeRequestJwtChallengeContext pushNotificationChallengeRequestJwtChallengeContext = (PushNotificationChallengeRequestJwtChallengeContext) o;
    return Objects.equals(this.clientOS, pushNotificationChallengeRequestJwtChallengeContext.clientOS) &&
        Objects.equals(this.clientLocation, pushNotificationChallengeRequestJwtChallengeContext.clientLocation) &&
        Objects.equals(this.transactionTime, pushNotificationChallengeRequestJwtChallengeContext.transactionTime) &&
        Objects.equals(this.transactionType, pushNotificationChallengeRequestJwtChallengeContext.transactionType) &&
        Objects.equals(this.bindingMessage, pushNotificationChallengeRequestJwtChallengeContext.bindingMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientOS, clientLocation, transactionTime, transactionType, bindingMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PushNotificationChallengeRequestJwtChallengeContext {\n");
    sb.append("    clientOS: ").append(toIndentedString(clientOS)).append("\n");
    sb.append("    clientLocation: ").append(toIndentedString(clientLocation)).append("\n");
    sb.append("    transactionTime: ").append(toIndentedString(transactionTime)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    bindingMessage: ").append(toIndentedString(bindingMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

