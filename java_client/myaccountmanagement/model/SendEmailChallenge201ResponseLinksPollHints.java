/*
 * MyAccount Management
 * APIs for managing a user's own emails, phones, profile, and app authenticators. > **Note:** The MyAccount API doesn't support [delegated authentication](https://help.okta.com/okta_help.htm?id=ext_Security_Authentication).
 *
 * The version of the OpenAPI document: 2025.01.1
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.okta.myaccount.myaccountmanagement.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.okta.myaccount.myaccountmanagement.invoker.JacksonConfig;

/**
 * Describes the allowed HTTP verbs for the &#x60;href&#x60;
 */
@JsonPropertyOrder({
  SendEmailChallenge201ResponseLinksPollHints.JSON_PROPERTY_ALLOW
})
@JsonTypeName("sendEmailChallenge_201_response__links_poll_hints")
@javax.annotation.Generated(value = "com.radiantlogic.openapi.codegen.javaclient.generate.codegen.RadiantJavaClientCodegen", date = "2025-08-13T20:31:08.570419254Z[GMT]", comments = "Generator version: unset")
public class SendEmailChallenge201ResponseLinksPollHints {
  /**
   * Gets or Sets allow
   */
  public enum AllowEnum {
    GET(String.valueOf("GET"));

    private String value;

    AllowEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AllowEnum fromValue(String value) {
      for (AllowEnum b : AllowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ALLOW = "allow";
  @javax.annotation.Nonnull
  private List<AllowEnum> allow = new ArrayList<>();

  public SendEmailChallenge201ResponseLinksPollHints() {
  }

  public SendEmailChallenge201ResponseLinksPollHints allow(@javax.annotation.Nonnull List<AllowEnum> allow) {
    
    this.allow = allow;
    return this;
  }

  public SendEmailChallenge201ResponseLinksPollHints addAllowItem(AllowEnum allowItem) {
    if (this.allow == null) {
      this.allow = new ArrayList<>();
    }
    this.allow.add(allowItem);
    return this;
  }

  /**
   * Get allow
   * @return allow
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ALLOW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<AllowEnum> getAllow() {
    return allow;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAllow(@javax.annotation.Nonnull List<AllowEnum> allow) {
    this.allow = allow;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendEmailChallenge201ResponseLinksPollHints sendEmailChallenge201ResponseLinksPollHints = (SendEmailChallenge201ResponseLinksPollHints) o;
    return Objects.equals(this.allow, sendEmailChallenge201ResponseLinksPollHints.allow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendEmailChallenge201ResponseLinksPollHints {\n");
    sb.append("    allow: ").append(toIndentedString(allow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

