/*
 * MyAccount Management
 * APIs for managing a user's own emails, phones, profile, and app authenticators. > **Note:** The MyAccount API doesn't support [delegated authentication](https://help.okta.com/okta_help.htm?id=ext_Security_Authentication).
 *
 * The version of the OpenAPI document: 2025.01.1
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.okta.myaccount.myaccountmanagement.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.okta.myaccount.myaccountmanagement.model.PollChallengeForEmailMagicLink200ResponseLinksVerifyHints;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.okta.myaccount.myaccountmanagement.invoker.JacksonConfig;

/**
 * Link to the resource (poll)
 */
@JsonPropertyOrder({
  PollChallengeForEmailMagicLink200ResponseLinksPoll.JSON_PROPERTY_HREF,
  PollChallengeForEmailMagicLink200ResponseLinksPoll.JSON_PROPERTY_HINTS
})
@JsonTypeName("pollChallengeForEmailMagicLink_200_response__links_poll")
@javax.annotation.Generated(value = "com.radiantlogic.openapi.codegen.javaclient.generate.codegen.RadiantJavaClientCodegen", date = "2025-08-13T20:31:08.570419254Z[GMT]", comments = "Generator version: unset")
public class PollChallengeForEmailMagicLink200ResponseLinksPoll {
  public static final String JSON_PROPERTY_HREF = "href";
  @javax.annotation.Nonnull
  private String href;

  public static final String JSON_PROPERTY_HINTS = "hints";
  @javax.annotation.Nonnull
  private PollChallengeForEmailMagicLink200ResponseLinksVerifyHints hints;

  public PollChallengeForEmailMagicLink200ResponseLinksPoll() {
  }

  public PollChallengeForEmailMagicLink200ResponseLinksPoll href(@javax.annotation.Nonnull String href) {
    
    this.href = href;
    return this;
  }

  /**
   * Link URI
   * @return href
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHref() {
    return href;
  }


  @JsonProperty(JSON_PROPERTY_HREF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHref(@javax.annotation.Nonnull String href) {
    this.href = href;
  }

  public PollChallengeForEmailMagicLink200ResponseLinksPoll hints(@javax.annotation.Nonnull PollChallengeForEmailMagicLink200ResponseLinksVerifyHints hints) {
    
    this.hints = hints;
    return this;
  }

  /**
   * Get hints
   * @return hints
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PollChallengeForEmailMagicLink200ResponseLinksVerifyHints getHints() {
    return hints;
  }


  @JsonProperty(JSON_PROPERTY_HINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHints(@javax.annotation.Nonnull PollChallengeForEmailMagicLink200ResponseLinksVerifyHints hints) {
    this.hints = hints;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PollChallengeForEmailMagicLink200ResponseLinksPoll pollChallengeForEmailMagicLink200ResponseLinksPoll = (PollChallengeForEmailMagicLink200ResponseLinksPoll) o;
    return Objects.equals(this.href, pollChallengeForEmailMagicLink200ResponseLinksPoll.href) &&
        Objects.equals(this.hints, pollChallengeForEmailMagicLink200ResponseLinksPoll.hints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, hints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PollChallengeForEmailMagicLink200ResponseLinksPoll {\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    hints: ").append(toIndentedString(hints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

