/*
 * MyAccount Management
 * APIs for managing a user's own emails, phones, profile, and app authenticators. > **Note:** The MyAccount API doesn't support [delegated authentication](https://help.okta.com/okta_help.htm?id=ext_Security_Authentication).
 *
 * The version of the OpenAPI document: 2025.01.1
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.okta.myaccount.myaccountmanagement.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.okta.myaccount.myaccountmanagement.invoker.JacksonConfig;

/**
 * JSON dictionary with the &#x60;signals&#x60; keys (and their values) requested in the challenge request
 */
@JsonPropertyOrder({
  PushNotificationChallengeResponseJwtDeviceSignals.JSON_PROPERTY_ID,
  PushNotificationChallengeResponseJwtDeviceSignals.JSON_PROPERTY_IS_HARDWARE_PROTECTION_ENABLED,
  PushNotificationChallengeResponseJwtDeviceSignals.JSON_PROPERTY_MODEL,
  PushNotificationChallengeResponseJwtDeviceSignals.JSON_PROPERTY_MANUFACTURER,
  PushNotificationChallengeResponseJwtDeviceSignals.JSON_PROPERTY_DISPLAY_NAME,
  PushNotificationChallengeResponseJwtDeviceSignals.JSON_PROPERTY_PLATFORM,
  PushNotificationChallengeResponseJwtDeviceSignals.JSON_PROPERTY_OS_VERSION,
  PushNotificationChallengeResponseJwtDeviceSignals.JSON_PROPERTY_CLIENT_INSTANCE_ID,
  PushNotificationChallengeResponseJwtDeviceSignals.JSON_PROPERTY_CLIENT_INSTANCE_BUNDLE_ID,
  PushNotificationChallengeResponseJwtDeviceSignals.JSON_PROPERTY_CLIENT_INSTANCE_VERSION,
  PushNotificationChallengeResponseJwtDeviceSignals.JSON_PROPERTY_SECURE_HARDWARE_PRESENT,
  PushNotificationChallengeResponseJwtDeviceSignals.JSON_PROPERTY_SCREEN_LOCK_TYPE,
  PushNotificationChallengeResponseJwtDeviceSignals.JSON_PROPERTY_DISK_ENCRYPTION_TYPE
})
@JsonTypeName("PushNotificationChallengeResponseJwt_deviceSignals")
@javax.annotation.Generated(value = "com.radiantlogic.openapi.codegen.javaclient.generate.codegen.RadiantJavaClientCodegen", date = "2025-08-13T20:31:08.570419254Z[GMT]", comments = "Generator version: unset")
public class PushNotificationChallengeResponseJwtDeviceSignals {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nullable
  private String id;

  public static final String JSON_PROPERTY_IS_HARDWARE_PROTECTION_ENABLED = "isHardwareProtectionEnabled";
  @javax.annotation.Nullable
  private Boolean isHardwareProtectionEnabled;

  public static final String JSON_PROPERTY_MODEL = "model";
  @javax.annotation.Nullable
  private String model;

  public static final String JSON_PROPERTY_MANUFACTURER = "manufacturer";
  @javax.annotation.Nullable
  private String manufacturer;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
  @javax.annotation.Nullable
  private String displayName;

  /**
   * The device operating system
   */
  public enum PlatformEnum {
    ANDROID(String.valueOf("ANDROID")),
    
    IOS(String.valueOf("IOS"));

    private String value;

    PlatformEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PlatformEnum fromValue(String value) {
      for (PlatformEnum b : PlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PLATFORM = "platform";
  @javax.annotation.Nullable
  private PlatformEnum platform;

  public static final String JSON_PROPERTY_OS_VERSION = "osVersion";
  @javax.annotation.Nullable
  private String osVersion;

  public static final String JSON_PROPERTY_CLIENT_INSTANCE_ID = "clientInstanceId";
  @javax.annotation.Nullable
  private String clientInstanceId;

  public static final String JSON_PROPERTY_CLIENT_INSTANCE_BUNDLE_ID = "clientInstanceBundleId";
  @javax.annotation.Nullable
  private String clientInstanceBundleId;

  public static final String JSON_PROPERTY_CLIENT_INSTANCE_VERSION = "clientInstanceVersion";
  @javax.annotation.Nullable
  private String clientInstanceVersion;

  public static final String JSON_PROPERTY_SECURE_HARDWARE_PRESENT = "secureHardwarePresent";
  @javax.annotation.Nullable
  private Boolean secureHardwarePresent;

  /**
   * Screen lock type set on the device
   */
  public enum ScreenLockTypeEnum {
    NONE(String.valueOf("NONE")),
    
    PASSCODE(String.valueOf("PASSCODE")),
    
    BIOMETRIC(String.valueOf("BIOMETRIC"));

    private String value;

    ScreenLockTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ScreenLockTypeEnum fromValue(String value) {
      for (ScreenLockTypeEnum b : ScreenLockTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SCREEN_LOCK_TYPE = "screenLockType";
  @javax.annotation.Nullable
  private ScreenLockTypeEnum screenLockType;

  /**
   * Disk encryption type of the device profile
   */
  public enum DiskEncryptionTypeEnum {
    NONE(String.valueOf("NONE")),
    
    FULL(String.valueOf("FULL")),
    
    USER(String.valueOf("USER"));

    private String value;

    DiskEncryptionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DiskEncryptionTypeEnum fromValue(String value) {
      for (DiskEncryptionTypeEnum b : DiskEncryptionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DISK_ENCRYPTION_TYPE = "diskEncryptionType";
  @javax.annotation.Nullable
  private DiskEncryptionTypeEnum diskEncryptionType;

  public PushNotificationChallengeResponseJwtDeviceSignals() {
  }

  public PushNotificationChallengeResponseJwtDeviceSignals id(@javax.annotation.Nullable String id) {
    
    this.id = id;
    return this;
  }

  /**
   * ID of the device
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }

  public PushNotificationChallengeResponseJwtDeviceSignals isHardwareProtectionEnabled(@javax.annotation.Nullable Boolean isHardwareProtectionEnabled) {
    
    this.isHardwareProtectionEnabled = isHardwareProtectionEnabled;
    return this;
  }

  /**
   * Indicates whether the Android device supports a hardware keystore or if the iOS device supports Secure Enclave
   * @return isHardwareProtectionEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_HARDWARE_PROTECTION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsHardwareProtectionEnabled() {
    return isHardwareProtectionEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_HARDWARE_PROTECTION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsHardwareProtectionEnabled(@javax.annotation.Nullable Boolean isHardwareProtectionEnabled) {
    this.isHardwareProtectionEnabled = isHardwareProtectionEnabled;
  }

  public PushNotificationChallengeResponseJwtDeviceSignals model(@javax.annotation.Nullable String model) {
    
    this.model = model;
    return this;
  }

  /**
   * The device type or design
   * @return model
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModel() {
    return model;
  }


  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModel(@javax.annotation.Nullable String model) {
    this.model = model;
  }

  public PushNotificationChallengeResponseJwtDeviceSignals manufacturer(@javax.annotation.Nullable String manufacturer) {
    
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * The vendor that created the physical device
   * @return manufacturer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MANUFACTURER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getManufacturer() {
    return manufacturer;
  }


  @JsonProperty(JSON_PROPERTY_MANUFACTURER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setManufacturer(@javax.annotation.Nullable String manufacturer) {
    this.manufacturer = manufacturer;
  }

  public PushNotificationChallengeResponseJwtDeviceSignals displayName(@javax.annotation.Nullable String displayName) {
    
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the device
   * @return displayName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }

  public PushNotificationChallengeResponseJwtDeviceSignals platform(@javax.annotation.Nullable PlatformEnum platform) {
    
    this.platform = platform;
    return this;
  }

  /**
   * The device operating system
   * @return platform
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLATFORM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PlatformEnum getPlatform() {
    return platform;
  }


  @JsonProperty(JSON_PROPERTY_PLATFORM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlatform(@javax.annotation.Nullable PlatformEnum platform) {
    this.platform = platform;
  }

  public PushNotificationChallengeResponseJwtDeviceSignals osVersion(@javax.annotation.Nullable String osVersion) {
    
    this.osVersion = osVersion;
    return this;
  }

  /**
   * The device operating system software version
   * @return osVersion
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OS_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOsVersion() {
    return osVersion;
  }


  @JsonProperty(JSON_PROPERTY_OS_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOsVersion(@javax.annotation.Nullable String osVersion) {
    this.osVersion = osVersion;
  }

  public PushNotificationChallengeResponseJwtDeviceSignals clientInstanceId(@javax.annotation.Nullable String clientInstanceId) {
    
    this.clientInstanceId = clientInstanceId;
    return this;
  }

  /**
   * Key ID of the client instance key
   * @return clientInstanceId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLIENT_INSTANCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClientInstanceId() {
    return clientInstanceId;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_INSTANCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientInstanceId(@javax.annotation.Nullable String clientInstanceId) {
    this.clientInstanceId = clientInstanceId;
  }

  public PushNotificationChallengeResponseJwtDeviceSignals clientInstanceBundleId(@javax.annotation.Nullable String clientInstanceBundleId) {
    
    this.clientInstanceBundleId = clientInstanceBundleId;
    return this;
  }

  /**
   * ID of the application bundle
   * @return clientInstanceBundleId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLIENT_INSTANCE_BUNDLE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClientInstanceBundleId() {
    return clientInstanceBundleId;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_INSTANCE_BUNDLE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientInstanceBundleId(@javax.annotation.Nullable String clientInstanceBundleId) {
    this.clientInstanceBundleId = clientInstanceBundleId;
  }

  public PushNotificationChallengeResponseJwtDeviceSignals clientInstanceVersion(@javax.annotation.Nullable String clientInstanceVersion) {
    
    this.clientInstanceVersion = clientInstanceVersion;
    return this;
  }

  /**
   * Application version
   * @return clientInstanceVersion
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLIENT_INSTANCE_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClientInstanceVersion() {
    return clientInstanceVersion;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_INSTANCE_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientInstanceVersion(@javax.annotation.Nullable String clientInstanceVersion) {
    this.clientInstanceVersion = clientInstanceVersion;
  }

  public PushNotificationChallengeResponseJwtDeviceSignals secureHardwarePresent(@javax.annotation.Nullable Boolean secureHardwarePresent) {
    
    this.secureHardwarePresent = secureHardwarePresent;
    return this;
  }

  /**
   * Indicates if secure hardware is present
   * @return secureHardwarePresent
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURE_HARDWARE_PRESENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSecureHardwarePresent() {
    return secureHardwarePresent;
  }


  @JsonProperty(JSON_PROPERTY_SECURE_HARDWARE_PRESENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecureHardwarePresent(@javax.annotation.Nullable Boolean secureHardwarePresent) {
    this.secureHardwarePresent = secureHardwarePresent;
  }

  public PushNotificationChallengeResponseJwtDeviceSignals screenLockType(@javax.annotation.Nullable ScreenLockTypeEnum screenLockType) {
    
    this.screenLockType = screenLockType;
    return this;
  }

  /**
   * Screen lock type set on the device
   * @return screenLockType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCREEN_LOCK_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ScreenLockTypeEnum getScreenLockType() {
    return screenLockType;
  }


  @JsonProperty(JSON_PROPERTY_SCREEN_LOCK_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScreenLockType(@javax.annotation.Nullable ScreenLockTypeEnum screenLockType) {
    this.screenLockType = screenLockType;
  }

  public PushNotificationChallengeResponseJwtDeviceSignals diskEncryptionType(@javax.annotation.Nullable DiskEncryptionTypeEnum diskEncryptionType) {
    
    this.diskEncryptionType = diskEncryptionType;
    return this;
  }

  /**
   * Disk encryption type of the device profile
   * @return diskEncryptionType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISK_ENCRYPTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DiskEncryptionTypeEnum getDiskEncryptionType() {
    return diskEncryptionType;
  }


  @JsonProperty(JSON_PROPERTY_DISK_ENCRYPTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiskEncryptionType(@javax.annotation.Nullable DiskEncryptionTypeEnum diskEncryptionType) {
    this.diskEncryptionType = diskEncryptionType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PushNotificationChallengeResponseJwtDeviceSignals pushNotificationChallengeResponseJwtDeviceSignals = (PushNotificationChallengeResponseJwtDeviceSignals) o;
    return Objects.equals(this.id, pushNotificationChallengeResponseJwtDeviceSignals.id) &&
        Objects.equals(this.isHardwareProtectionEnabled, pushNotificationChallengeResponseJwtDeviceSignals.isHardwareProtectionEnabled) &&
        Objects.equals(this.model, pushNotificationChallengeResponseJwtDeviceSignals.model) &&
        Objects.equals(this.manufacturer, pushNotificationChallengeResponseJwtDeviceSignals.manufacturer) &&
        Objects.equals(this.displayName, pushNotificationChallengeResponseJwtDeviceSignals.displayName) &&
        Objects.equals(this.platform, pushNotificationChallengeResponseJwtDeviceSignals.platform) &&
        Objects.equals(this.osVersion, pushNotificationChallengeResponseJwtDeviceSignals.osVersion) &&
        Objects.equals(this.clientInstanceId, pushNotificationChallengeResponseJwtDeviceSignals.clientInstanceId) &&
        Objects.equals(this.clientInstanceBundleId, pushNotificationChallengeResponseJwtDeviceSignals.clientInstanceBundleId) &&
        Objects.equals(this.clientInstanceVersion, pushNotificationChallengeResponseJwtDeviceSignals.clientInstanceVersion) &&
        Objects.equals(this.secureHardwarePresent, pushNotificationChallengeResponseJwtDeviceSignals.secureHardwarePresent) &&
        Objects.equals(this.screenLockType, pushNotificationChallengeResponseJwtDeviceSignals.screenLockType) &&
        Objects.equals(this.diskEncryptionType, pushNotificationChallengeResponseJwtDeviceSignals.diskEncryptionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, isHardwareProtectionEnabled, model, manufacturer, displayName, platform, osVersion, clientInstanceId, clientInstanceBundleId, clientInstanceVersion, secureHardwarePresent, screenLockType, diskEncryptionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PushNotificationChallengeResponseJwtDeviceSignals {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isHardwareProtectionEnabled: ").append(toIndentedString(isHardwareProtectionEnabled)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    clientInstanceId: ").append(toIndentedString(clientInstanceId)).append("\n");
    sb.append("    clientInstanceBundleId: ").append(toIndentedString(clientInstanceBundleId)).append("\n");
    sb.append("    clientInstanceVersion: ").append(toIndentedString(clientInstanceVersion)).append("\n");
    sb.append("    secureHardwarePresent: ").append(toIndentedString(secureHardwarePresent)).append("\n");
    sb.append("    screenLockType: ").append(toIndentedString(screenLockType)).append("\n");
    sb.append("    diskEncryptionType: ").append(toIndentedString(diskEncryptionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

