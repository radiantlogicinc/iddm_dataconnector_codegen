/*
 * MyAccount Management
 * APIs for managing a user's own emails, phones, profile, and app authenticators. > **Note:** The MyAccount API doesn't support [delegated authentication](https://help.okta.com/okta_help.htm?id=ext_Security_Authentication).
 *
 * The version of the OpenAPI document: 2025.01.1
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.okta.myaccount.myaccountmanagement.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.okta.myaccount.myaccountmanagement.invoker.JacksonConfig;

/**
 * Object describing the response context
 */
@JsonPropertyOrder({
  PushNotificationChallengeResponseJwtChallengeResponseContext.JSON_PROPERTY_USER_CONSENT,
  PushNotificationChallengeResponseJwtChallengeResponseContext.JSON_PROPERTY_TRANSACTION_TYPE
})
@JsonTypeName("PushNotificationChallengeResponseJwt_challengeResponseContext")
@javax.annotation.Generated(value = "com.radiantlogic.openapi.codegen.javaclient.generate.codegen.RadiantJavaClientCodegen", date = "2025-08-13T20:31:08.570419254Z[GMT]", comments = "Generator version: unset")
public class PushNotificationChallengeResponseJwtChallengeResponseContext {
  /**
   * Type of user consent
   */
  public enum UserConsentEnum {
    NONE(String.valueOf("NONE")),
    
    APPROVED_CONSENT_PROMPT(String.valueOf("APPROVED_CONSENT_PROMPT")),
    
    APPROVED_USER_VERIFICATION(String.valueOf("APPROVED_USER_VERIFICATION")),
    
    CANCELLED_USER_VERIFICATION(String.valueOf("CANCELLED_USER_VERIFICATION")),
    
    DENIED_CONSENT_PROMPT(String.valueOf("DENIED_CONSENT_PROMPT")),
    
    UV_TEMPORARILY_UNAVAILABLE(String.valueOf("UV_TEMPORARILY_UNAVAILABLE")),
    
    UV_PERMANENTLY_UNAVAILABLE(String.valueOf("UV_PERMANENTLY_UNAVAILABLE")),
    
    USER_ABANDONED(String.valueOf("USER_ABANDONED"));

    private String value;

    UserConsentEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UserConsentEnum fromValue(String value) {
      for (UserConsentEnum b : UserConsentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_USER_CONSENT = "userConsent";
  @javax.annotation.Nonnull
  private UserConsentEnum userConsent;

  /**
   * Type of transaction
   */
  public enum TransactionTypeEnum {
    LOGIN(String.valueOf("LOGIN")),
    
    CIBA(String.valueOf("CIBA"));

    private String value;

    TransactionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TransactionTypeEnum fromValue(String value) {
      for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TRANSACTION_TYPE = "transactionType";
  @javax.annotation.Nullable
  private TransactionTypeEnum transactionType;

  public PushNotificationChallengeResponseJwtChallengeResponseContext() {
  }

  public PushNotificationChallengeResponseJwtChallengeResponseContext userConsent(@javax.annotation.Nonnull UserConsentEnum userConsent) {
    
    this.userConsent = userConsent;
    return this;
  }

  /**
   * Type of user consent
   * @return userConsent
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_CONSENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UserConsentEnum getUserConsent() {
    return userConsent;
  }


  @JsonProperty(JSON_PROPERTY_USER_CONSENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserConsent(@javax.annotation.Nonnull UserConsentEnum userConsent) {
    this.userConsent = userConsent;
  }

  public PushNotificationChallengeResponseJwtChallengeResponseContext transactionType(@javax.annotation.Nullable TransactionTypeEnum transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

  /**
   * Type of transaction
   * @return transactionType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TransactionTypeEnum getTransactionType() {
    return transactionType;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionType(@javax.annotation.Nullable TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PushNotificationChallengeResponseJwtChallengeResponseContext pushNotificationChallengeResponseJwtChallengeResponseContext = (PushNotificationChallengeResponseJwtChallengeResponseContext) o;
    return Objects.equals(this.userConsent, pushNotificationChallengeResponseJwtChallengeResponseContext.userConsent) &&
        Objects.equals(this.transactionType, pushNotificationChallengeResponseJwtChallengeResponseContext.transactionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userConsent, transactionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PushNotificationChallengeResponseJwtChallengeResponseContext {\n");
    sb.append("    userConsent: ").append(toIndentedString(userConsent)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

