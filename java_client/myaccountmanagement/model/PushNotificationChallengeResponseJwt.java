/*
 * MyAccount Management
 * APIs for managing a user's own emails, phones, profile, and app authenticators. > **Note:** The MyAccount API doesn't support [delegated authentication](https://help.okta.com/okta_help.htm?id=ext_Security_Authentication).
 *
 * The version of the OpenAPI document: 2025.01.1
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.okta.myaccount.myaccountmanagement.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.okta.myaccount.myaccountmanagement.model.PushNotificationChallengeResponseJwtChallengeResponseContext;
import com.okta.myaccount.myaccountmanagement.model.PushNotificationChallengeResponseJwtDeviceSignals;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.okta.myaccount.myaccountmanagement.invoker.JacksonConfig;

/**
 * JSON Web Token payload used for the push notification challenge response JWT
 */
@JsonPropertyOrder({
  PushNotificationChallengeResponseJwt.JSON_PROPERTY_AUD,
  PushNotificationChallengeResponseJwt.JSON_PROPERTY_CHALLENGE_RESPONSE_CONTEXT,
  PushNotificationChallengeResponseJwt.JSON_PROPERTY_DEVICE_SIGNALS,
  PushNotificationChallengeResponseJwt.JSON_PROPERTY_EXP,
  PushNotificationChallengeResponseJwt.JSON_PROPERTY_IAT,
  PushNotificationChallengeResponseJwt.JSON_PROPERTY_ISS,
  PushNotificationChallengeResponseJwt.JSON_PROPERTY_JTI,
  PushNotificationChallengeResponseJwt.JSON_PROPERTY_KEY_TYPE,
  PushNotificationChallengeResponseJwt.JSON_PROPERTY_METHOD_ENROLLMENT_ID,
  PushNotificationChallengeResponseJwt.JSON_PROPERTY_NBF,
  PushNotificationChallengeResponseJwt.JSON_PROPERTY_NONCE,
  PushNotificationChallengeResponseJwt.JSON_PROPERTY_SUB,
  PushNotificationChallengeResponseJwt.JSON_PROPERTY_TX
})
@javax.annotation.Generated(value = "com.radiantlogic.openapi.codegen.javaclient.generate.codegen.RadiantJavaClientCodegen", date = "2025-08-13T20:31:08.570419254Z[GMT]", comments = "Generator version: unset")
public class PushNotificationChallengeResponseJwt {
  public static final String JSON_PROPERTY_AUD = "aud";
  @javax.annotation.Nonnull
  private String aud;

  public static final String JSON_PROPERTY_CHALLENGE_RESPONSE_CONTEXT = "challengeResponseContext";
  @javax.annotation.Nonnull
  private PushNotificationChallengeResponseJwtChallengeResponseContext challengeResponseContext;

  public static final String JSON_PROPERTY_DEVICE_SIGNALS = "deviceSignals";
  @javax.annotation.Nullable
  private PushNotificationChallengeResponseJwtDeviceSignals deviceSignals;

  public static final String JSON_PROPERTY_EXP = "exp";
  @javax.annotation.Nonnull
  private String exp;

  public static final String JSON_PROPERTY_IAT = "iat";
  @javax.annotation.Nonnull
  private String iat;

  public static final String JSON_PROPERTY_ISS = "iss";
  @javax.annotation.Nonnull
  private String iss;

  public static final String JSON_PROPERTY_JTI = "jti";
  @javax.annotation.Nonnull
  private String jti;

  /**
   * Type of key used to sign the JWT
   */
  public enum KeyTypeEnum {
    PROOF_OF_POSSESSION(String.valueOf("proofOfPossession")),
    
    USER_VERIFICATION(String.valueOf("userVerification"));

    private String value;

    KeyTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static KeyTypeEnum fromValue(String value) {
      for (KeyTypeEnum b : KeyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_KEY_TYPE = "keyType";
  @javax.annotation.Nonnull
  private KeyTypeEnum keyType;

  public static final String JSON_PROPERTY_METHOD_ENROLLMENT_ID = "methodEnrollmentId";
  @javax.annotation.Nonnull
  private String methodEnrollmentId;

  public static final String JSON_PROPERTY_NBF = "nbf";
  @javax.annotation.Nonnull
  private String nbf;

  public static final String JSON_PROPERTY_NONCE = "nonce";
  @javax.annotation.Nonnull
  private String nonce;

  public static final String JSON_PROPERTY_SUB = "sub";
  @javax.annotation.Nonnull
  private String sub;

  public static final String JSON_PROPERTY_TX = "tx";
  @javax.annotation.Nonnull
  private String tx;

  public PushNotificationChallengeResponseJwt() {
  }

  public PushNotificationChallengeResponseJwt aud(@javax.annotation.Nonnull String aud) {
    
    this.aud = aud;
    return this;
  }

  /**
   * Audience (matches the org URL)
   * @return aud
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAud() {
    return aud;
  }


  @JsonProperty(JSON_PROPERTY_AUD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAud(@javax.annotation.Nonnull String aud) {
    this.aud = aud;
  }

  public PushNotificationChallengeResponseJwt challengeResponseContext(@javax.annotation.Nonnull PushNotificationChallengeResponseJwtChallengeResponseContext challengeResponseContext) {
    
    this.challengeResponseContext = challengeResponseContext;
    return this;
  }

  /**
   * Get challengeResponseContext
   * @return challengeResponseContext
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CHALLENGE_RESPONSE_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PushNotificationChallengeResponseJwtChallengeResponseContext getChallengeResponseContext() {
    return challengeResponseContext;
  }


  @JsonProperty(JSON_PROPERTY_CHALLENGE_RESPONSE_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setChallengeResponseContext(@javax.annotation.Nonnull PushNotificationChallengeResponseJwtChallengeResponseContext challengeResponseContext) {
    this.challengeResponseContext = challengeResponseContext;
  }

  public PushNotificationChallengeResponseJwt deviceSignals(@javax.annotation.Nullable PushNotificationChallengeResponseJwtDeviceSignals deviceSignals) {
    
    this.deviceSignals = deviceSignals;
    return this;
  }

  /**
   * Get deviceSignals
   * @return deviceSignals
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEVICE_SIGNALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PushNotificationChallengeResponseJwtDeviceSignals getDeviceSignals() {
    return deviceSignals;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_SIGNALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceSignals(@javax.annotation.Nullable PushNotificationChallengeResponseJwtDeviceSignals deviceSignals) {
    this.deviceSignals = deviceSignals;
  }

  public PushNotificationChallengeResponseJwt exp(@javax.annotation.Nonnull String exp) {
    
    this.exp = exp;
    return this;
  }

  /**
   * Expiration time of token (UNIX timestamp)
   * @return exp
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getExp() {
    return exp;
  }


  @JsonProperty(JSON_PROPERTY_EXP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExp(@javax.annotation.Nonnull String exp) {
    this.exp = exp;
  }

  public PushNotificationChallengeResponseJwt iat(@javax.annotation.Nonnull String iat) {
    
    this.iat = iat;
    return this;
  }

  /**
   * Issuing time of token (UNIX timestamp)
   * @return iat
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIat() {
    return iat;
  }


  @JsonProperty(JSON_PROPERTY_IAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIat(@javax.annotation.Nonnull String iat) {
    this.iat = iat;
  }

  public PushNotificationChallengeResponseJwt iss(@javax.annotation.Nonnull String iss) {
    
    this.iss = iss;
    return this;
  }

  /**
   * Issuer (matches the app authenticator enrollment ID)
   * @return iss
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ISS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIss() {
    return iss;
  }


  @JsonProperty(JSON_PROPERTY_ISS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIss(@javax.annotation.Nonnull String iss) {
    this.iss = iss;
  }

  public PushNotificationChallengeResponseJwt jti(@javax.annotation.Nonnull String jti) {
    
    this.jti = jti;
    return this;
  }

  /**
   * Randomly generated ID for every response
   * @return jti
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_JTI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getJti() {
    return jti;
  }


  @JsonProperty(JSON_PROPERTY_JTI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setJti(@javax.annotation.Nonnull String jti) {
    this.jti = jti;
  }

  public PushNotificationChallengeResponseJwt keyType(@javax.annotation.Nonnull KeyTypeEnum keyType) {
    
    this.keyType = keyType;
    return this;
  }

  /**
   * Type of key used to sign the JWT
   * @return keyType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_KEY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public KeyTypeEnum getKeyType() {
    return keyType;
  }


  @JsonProperty(JSON_PROPERTY_KEY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKeyType(@javax.annotation.Nonnull KeyTypeEnum keyType) {
    this.keyType = keyType;
  }

  public PushNotificationChallengeResponseJwt methodEnrollmentId(@javax.annotation.Nonnull String methodEnrollmentId) {
    
    this.methodEnrollmentId = methodEnrollmentId;
    return this;
  }

  /**
   * ID of the push method enrollmnet
   * @return methodEnrollmentId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_METHOD_ENROLLMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMethodEnrollmentId() {
    return methodEnrollmentId;
  }


  @JsonProperty(JSON_PROPERTY_METHOD_ENROLLMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMethodEnrollmentId(@javax.annotation.Nonnull String methodEnrollmentId) {
    this.methodEnrollmentId = methodEnrollmentId;
  }

  public PushNotificationChallengeResponseJwt nbf(@javax.annotation.Nonnull String nbf) {
    
    this.nbf = nbf;
    return this;
  }

  /**
   * Token isn&#39;t valid before this time (UNIX timestamp)
   * @return nbf
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NBF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNbf() {
    return nbf;
  }


  @JsonProperty(JSON_PROPERTY_NBF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNbf(@javax.annotation.Nonnull String nbf) {
    this.nbf = nbf;
  }

  public PushNotificationChallengeResponseJwt nonce(@javax.annotation.Nonnull String nonce) {
    
    this.nonce = nonce;
    return this;
  }

  /**
   * Matches the &#x60;nonce&#x60; in the challenge request
   * @return nonce
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NONCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNonce() {
    return nonce;
  }


  @JsonProperty(JSON_PROPERTY_NONCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNonce(@javax.annotation.Nonnull String nonce) {
    this.nonce = nonce;
  }

  public PushNotificationChallengeResponseJwt sub(@javax.annotation.Nonnull String sub) {
    
    this.sub = sub;
    return this;
  }

  /**
   * Subject (matches the user ID)
   * @return sub
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUB)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSub() {
    return sub;
  }


  @JsonProperty(JSON_PROPERTY_SUB)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSub(@javax.annotation.Nonnull String sub) {
    this.sub = sub;
  }

  public PushNotificationChallengeResponseJwt tx(@javax.annotation.Nonnull String tx) {
    
    this.tx = tx;
    return this;
  }

  /**
   * Matches the &#x60;transactionId&#x60; in the challenge request
   * @return tx
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTx() {
    return tx;
  }


  @JsonProperty(JSON_PROPERTY_TX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTx(@javax.annotation.Nonnull String tx) {
    this.tx = tx;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PushNotificationChallengeResponseJwt pushNotificationChallengeResponseJwt = (PushNotificationChallengeResponseJwt) o;
    return Objects.equals(this.aud, pushNotificationChallengeResponseJwt.aud) &&
        Objects.equals(this.challengeResponseContext, pushNotificationChallengeResponseJwt.challengeResponseContext) &&
        Objects.equals(this.deviceSignals, pushNotificationChallengeResponseJwt.deviceSignals) &&
        Objects.equals(this.exp, pushNotificationChallengeResponseJwt.exp) &&
        Objects.equals(this.iat, pushNotificationChallengeResponseJwt.iat) &&
        Objects.equals(this.iss, pushNotificationChallengeResponseJwt.iss) &&
        Objects.equals(this.jti, pushNotificationChallengeResponseJwt.jti) &&
        Objects.equals(this.keyType, pushNotificationChallengeResponseJwt.keyType) &&
        Objects.equals(this.methodEnrollmentId, pushNotificationChallengeResponseJwt.methodEnrollmentId) &&
        Objects.equals(this.nbf, pushNotificationChallengeResponseJwt.nbf) &&
        Objects.equals(this.nonce, pushNotificationChallengeResponseJwt.nonce) &&
        Objects.equals(this.sub, pushNotificationChallengeResponseJwt.sub) &&
        Objects.equals(this.tx, pushNotificationChallengeResponseJwt.tx);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aud, challengeResponseContext, deviceSignals, exp, iat, iss, jti, keyType, methodEnrollmentId, nbf, nonce, sub, tx);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PushNotificationChallengeResponseJwt {\n");
    sb.append("    aud: ").append(toIndentedString(aud)).append("\n");
    sb.append("    challengeResponseContext: ").append(toIndentedString(challengeResponseContext)).append("\n");
    sb.append("    deviceSignals: ").append(toIndentedString(deviceSignals)).append("\n");
    sb.append("    exp: ").append(toIndentedString(exp)).append("\n");
    sb.append("    iat: ").append(toIndentedString(iat)).append("\n");
    sb.append("    iss: ").append(toIndentedString(iss)).append("\n");
    sb.append("    jti: ").append(toIndentedString(jti)).append("\n");
    sb.append("    keyType: ").append(toIndentedString(keyType)).append("\n");
    sb.append("    methodEnrollmentId: ").append(toIndentedString(methodEnrollmentId)).append("\n");
    sb.append("    nbf: ").append(toIndentedString(nbf)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    sub: ").append(toIndentedString(sub)).append("\n");
    sb.append("    tx: ").append(toIndentedString(tx)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

